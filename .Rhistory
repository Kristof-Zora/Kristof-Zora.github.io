ColAuto<-rep(0,dim(shuttle2[1]))
ColAuto<-rep(0,dim(shuttle2)[1])
ColAuto[1:5]
shuttle2<-cbind(shuttle2,ColAuto)
head(shuttle2)
tail(shuttle2)
library(dplyr)
mutate(shuttle2[shuttle2$use=="auto",],ColAuto=1)
shuttle2
shuttle2<-mutate(shuttle2[shuttle2$use=="auto",],ColAuto=1)
head(shuttle2)
tail(shuttle2)
shuttle2<-shuttle
head(shuttle2)
ColAuto<-rep(0,dim(shuttle2)[1])
shuttle2<-cbind(shuttle2,ColAuto)
shuttle2[shuttle2$use=="auto",ColAuto]=1
shuttle2[use=="auto",ColAuto]=1
shuttle2[use=="auto",ColAuto]<-1
shuttle2[use=="auto",ColAuto]<-shuttle2$ColAuto+1
shuttle2[use==auto,ColAuto]<-shuttle2$ColAuto+1
shuttle2[shuttle2$use=="auto",shuttle2$ColAuto]<-shuttle2$ColAuto+1
shuttle2[shuttle2$use=="auto",shuttle2$ColAuto]<-1
?glm
shuttle2<-shuttle
head(shuttle2)
shuttle2<-relevel(shuttle$use,"nonauto")
shuttle2<-relevel(shuttle$use,"noauto")
tail(shuttle2)
head(shuttle2)
head(shuttle)
shuttle2<-relevel(shuttle2$use,"noauto")
tail(shuttle2)
shuttle2<-shuttle
tail(shuttle2)
shuttle2<-relevel(shuttle2$use,"noauto")
tail(shuttle2)
shuttle2<-shuttle
relevel<-relevel(shuttle2$use,"noauto")
fit<-glm(relevel~wind,data=shuttle2,family="binomial")
summary(fit)
exp(fit$coef)
relevel<-relevel(shuttle2$use,"auto")
fit2<-glm(relevel~wind,data=shuttle2,family="binomial")
summary(fit2)
cbind(exp(fit$coef),exp(fit2$coef))
shuttle2<-shuttle
head(shuttle2)
ColAuto<-rep(0,dim(shuttle2)[1])
shuttle2<-cbind(shuttle2,ColAuto)
for(i in 1:dim(shuttle2)[1]){
if(shuttle2[i,use]=="auto") shutle2[i,ColAuto]=1
}
shuttle2[1,]
shuttle2[1,use]
shuttle2[1,"use"]
for(i in 1:dim(shuttle2)[1]){
if(shuttle2[i,"use"]=="auto") shutle2[i,"ColAuto"]=1
}
for(i in 1:dim(shuttle2)[1]){
if(shuttle2[i,"use"]=="auto") shuttle2[i,"ColAuto"]=1
}
head(shuttle2)
tail(shuttle2)
fit1<-glm(use~wind,data=shuttle2,family="binomial")
fit2<-glm(ColAuto~wind,data=shuttle2,family="binomial")
fit1$coef
fit2$coef
rel<-relevel(shuttle2$use,"auto")
fit3<-glm(use~wind,data=shuttle2,family="binomial")
fit3$coef
rel2<-relevel(shuttle2$use,"noauto")
fit3<-glm(rel~wind,data=shuttle2,family="binomial")
fit4<-glm(rel2~wind,data=shuttle2,family="binomial")
cbind(fit,fit2,fit3,fit4)
cbind(fit$coef,fit2$coef,fit3$coef,fit4$coef)
head(shuttle)
head(shuttle2)
shuttle2<-shuttle
cbind(shuttle2,ColAuto=rep(0,nrow(shuttle2)))
shuttle2<-cbind(shuttle2,ColAuto=rep(0,nrow(shuttle2)))
head(shuttle2)
shuttle2[use=="auto","ColAuto"]<-1
shuttle2["use"=="auto","ColAuto"]<-1
head(shuttle2)
shuttle2[shuttle2$use=="auto","ColAuto"]<-1
head(shuttle2)
tail(shuttle2)
fit<-glm(use~wind,data=shuttle2,family="binomial")
fit2<-glm(ColAuto~wind,data=shuttle2,family="binomial")
cbind(fit$coef,fit2$coef)
rel<-relevel(shuttle2$use,"auto")
fit3<-glm(use~wind,data=shuttle2,family="binomial")
cbind(fit$coef,fit2$coef,fit3$coef)
rel2<-relevel(shuttle2$use,"noauto")
fit4<-glm(use~wind,data=shuttle2,family="binomial")
cbind(fit$coef,fit2$coef,fit3$coef,fit4$coef)
fit3<-glm(rel~wind,data=shuttle2,family="binomial")
fit4<-glm(rel2~wind,data=shuttle2,family="binomial")
cbind(fit$coef,fit2$coef,fit3$coef,fit4$coef)
summary(fit2)
exp(fit2$coef)
exp(fit1$coef)
coefficients(fit2)
1/exp(fit2$coef)
str(shuttle2)
FIT<-glm(ColAuto~wind+magn,data=shuttle2,family="binomial")
summary(FIT)
exp(3.635e-01)
InsectSprays
str(InsectSprays)
fit_poi<-glm(count~spray,data=InsectSprays,family="poisson")
summary(fit_poi)
fit_poi$coef[1]+fit_poi$coef[2]
2.67415+0.05588
-fit_poi$coef[1]
-fit_poi$coef[2]
exp(-fit_poi$coef[2])
q("yes")
library(MASS)
?shuttle
head(shuttle)
shuttle2
head(shuttle2)
str(shuttle2)
library(dplyr)
shuttle2<-mutate(shuttle2,as.factor(ColAuto))
str(shuttle2)
head(shuttle2)
shuttle2<-mutate(shuttle2,ColAuto=as.factor(ColAuto))
head(shuttle2)
shuttle2<-select(-as.factor(ColAuto),shuttle2)
?select
shuttle2<-select(,shuttle2,-as.factor(ColAuto))
shuttle2<-select(shuttle2,-as.factor(ColAuto))
shuttle2<-select(shuttle2,.-as.factor(ColAuto))
shuttle2<-select(shuttle2,stability:ColAuto)
head(shuttle2)
str(shuttle2)
fit<-glm(ColAuto~wind,family="binomial")
fit<-glm(ColAuto~wind,data=shuttle2,family="binomial")
fit$coef
fit$coef[1]
exp(fit$coef[1])
exp(-fit$coef[1])
shuttle2<-relevel(shuttle2$wind,"tail")
str(shuttle2)
shuttle2<-shuttle
shuttle2<-cbind(shuttle2,ColAuto=rep(0,nrow(shuttle2)))
shuttle2[shuttle2$use=="auto","ColAuto"]<-1
head(shuttle2)
str(shuttle2)
shuttle2<-mutate(shuttle2,ColAuto=as.factor(ColAuto))
head(shuttle2)
str(shuttle2)
shuttle2$wind<-relevel(shuttle2$wind,"tail")
str(shuttle2)
fit2<-glm(ColAuto~wind,data=shuttle2,family="binomial")
fit2$coef
exp(fit2$coef[1])
shuttle2$wind<-relevel(shuttle2$wind,"head")
str(shuttle2)
fit3<-glm(ColAuto~wind,data=shuttle2,family="binomial")
fit3$coef
shuttle2$wind<-relevel(shuttle2$wind,"tail")
fit2<-glm(ColAuto~wind,data=shuttle2,family="binomial")
exp(fit2$coef[1])
shuttle2$magn[1:15]
fit4<-glm(ColAuto~wind+magn,data=shuttle2,family="binomial")
fit4$coef
exp(fit4$coef[1])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot<-0
sp<-sapply(knot,function(k) (x>k)*(x-k))
sp
xm<-cbind(1,x,sp)
fit5<-lm(y~xm-1)
fit5$coef
fit5$coef[2]+fit5$coef[3]
q("yes")
data(mtcars)
library(dplyr)
library(stats)
mtcars<-mutate(mtcars, am=as.factor(am), cyl=as.factor(cyl),vs=as.factor(vs),gear=as.factor(gear),carb=as.factor(carb))
myModel<-lm(mpg~.,data=mtcars)
summary(myModel)
stepFit<-step(myModel)
summary(stepFit)
q("yes")
q("yes")
q("yes")
q("yes")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
version
install.packages("installr")
library(installr)
updateR()
updateR()
version
updateR()
version
library(caret)
install.packages('caret')
library(caret)
library('caret')
library("caret")
library(installr)
updateR()
q("yes")
version
library(caret)
install.packages("caret")
library(caret)
library(lattice)
library(ggplot2)
library(caret)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
intall.packages('Hmisc')
intall.packages(Hmisc)
install.packages('Hmisc')
library(Hmisc)
install.packages('survival')
install.packages("survival")
library(survival)
library(Hmisc)
library(lattice)
library(ggplot2)
library(Formula)
library(Hmisc)
install.packages('Hmisc')
library(Hmisc)
library(backports)
install.packages('backports')
library(backports)
head(mixtures)
summary(mixtures)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,color=as.factor(FlyAsH))
plot(training$CompressiveStrength,color=as.factor(mixtures$FlyAsH))
qplot(training$CompressiveStrength,color=as.factor(mixtures$FlyAsH))
qplot(CompressiveStrength,color=as.factor(FlyAsH),data=training)
qplot(CompressiveStrength,color=as.factor(mixtures$FlyAsH),data=training)
qplot(CompressiveStrength,data=training)
plot(CompressiveStrength,data=training)
plot(training$CompressiveStrength,color=factor(mixtures$FlyAsH))
qplot(CompressiveStrength,color=factor(FlyAsH),data=training)
qplot(CompressiveStrength,color=factor(training$FlyAsH),data=training)
qplot(CompressiveStrength,col=factor(training$FlyAsH),data=training)
with(training,plot(CompressiveStrength,col=factor(FlyAsh)))
with(training,plot(CompressiveStrength,col=factor(age)))
with(training,plot(CompressiveStrength,col=factor(Age)))
with(training,plot(CompressiveStrength,col=factor(FlyAsh)))
with(training,plot(CompressiveStrength,col=factor(Cement)))
with(training,plot(CompressiveStrength,col=factor(BlastFurnaceSlag)))
with(training,plot(CompressiveStrength,col=factor(Cement)))
with(training,plot(CompressiveStrength,col=factor(FlyAsh)))
with(training,plot(CompressiveStrength,col=factor(Age)))
hist(SuperPlasticizer)
hist(trainig$SuperPlasticizer)
hist(training$SuperPlasticizer)
str(training)
hist(num(training$SuperPlasticizer))
hist(as.num(training$SuperPlasticizer))
hist(training$SuperPlasticizer)
class(training$Superplasticizer)
hist(training$SuperPlasticizer,col="green")
?hist
?aas.numeric
?as.numeric
is.numeric(training$Superplasticizer)
hist(as.numeric(training$SuperPlasticizer),col="green")
p <- ggplot(training, aes(x=SuperPlasticizer)) +
geom_histogram()
p
library(ggplot2)
p <- ggplot(training, aes(x=SuperPlasticizer)) +
geom_histogram()
p
hist([1,1,1,2,3,2,5,3,6,4,7,1,2,4,3,7],col="green")
hist(c(1,1,1,2,3,2,5,3,6,4,7,1,2,4,3,7),col="green")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
str(training)
training_IL<-training[58,69]
training_IL[1,]
training_IL
training_IL<-training[,58-69]
training_IL[1,]
training_IL[1,58]
names(training_IL)
training_IL<-select(training[,58-69])
training_IL<-training[,58:69]
training_IL[1,]
??preProcess
?preProcess
preProcess(training_IL,method="pca",thresh=0.9)
preProcess(training_IL,method="pca")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
training_IL<-training[,c(1,58:69)]
names(training_IL)
model1<-train(training_IL$diagnosis~.,method="glm",data=training_IL)
library(e1071)
install.packages("e1071")
library(e1071)
model1<-train(training_IL$diagnosis~.,method="glm",data=training_IL)
model1<-train(training_IL$diagnosis~.,method="glm",data=training_IL)
?train
model1<-train(diagnosis~.,method="glm",data=training_IL)
model2<-train(dignosis~.,method="glm",preProcess="pca",thresh=0.8)
model2<-train(dignosis~.,method="glm",preProcess="pca",thresh=0.8,data=training_IL)
dim(training_IL)
preproc<-preProcess(training_IL[2:13],method="pca",thresh = 0.8)
training_IL-pc<-predict(preproc,training_IL[2:13])
training_IL_pc<-predict(preproc,training_IL[2:13])
model2<-train(diagnosis~.,method="glm",data=training_IL_pc)
model2<-train(training_IL$diagnosis~.,method="glm",data=training_IL_pc)
model2<-train(training$diagnosis~.,method="glm",data=training_IL_pc)
names(training_IL_pc)
dim(training_IL_pc)
dim(training_IL)
dim(training)
training_IL_pc<-data.fram[training$diagnosis,training_IL_pc]
training_IL_pc<-data.frame[training$diagnosis,training_IL_pc]
training_IL_pc<-data.frame(training$diagnosis,training_IL_pc)
dim(training_IL_pc)
model2<-train(training_IL_pc$diagnosis~.,method="glm",data=training_IL_pc)
head(training_IL_pc)
q("yes")
q("yes")
rep(c(0,3),each=5)
x<-random(4,c(1,3,2),0.2)
x<-rnorm(4,c(1,3,2),0.2)
y<-rnorm(4,c(0,3,5),0.05)
plot(x,y)
x<-rnorm(4,c(1,3,2,1),0.2)
y<-rnorm(4,c(0,3,5,4),0.05)
plot(x,y)
df<-data.fram(x=x,y=y)
df<-data.frame(x=x,y=y)
dist(df)
distMatrix<-as.matrix(dist(df))
distMatrix
distMatrix<-diag(distMatrix)+50
distMatrix
distMatrix<-as.matrix(dist(df))
distMatrix
diag(distMatrix)<-diag(distMatrix)+50
distMatrix
plot(x,y,col="blue",pch=19,cex=2)
plot(x,y,col="blue",pch=19,cex=1)
text(x+0.05,y+0.05,labels=as.character(1:4))
ind=which(distMatrix=min(distMatrix),arr.ind = TRUE)
ind<-which(distMatrix=min(distMatrix),arr.ind = TRUE)
ind<-which(distMatrix==min(distMatrix),arr.ind = TRUE)
ind
ind<-which(distMatrix==min(distMatrix))
ind
ind<-which(distMatrix==min(distMatrix),arr.ind = TRUE)
ind
order(distMatrix)
distMatrix[7]
distMatrix[order(distMatrix)][4]
distMatrix[order(distMatrix)][16]
hclustering<-df %>% dist %>% hclust
distMatrix <- dist(df)
hClustering<-hclust(distMatrix)
plot(hClustering)
distMatrix
max(distMatrix)
df
heatmap(as.matrix(df))
rep(c(0,5))
rep(c(0,5),5)
rep(c(0,5),each=5)
?prcomp
q("yes")
library(tree)
install.packages('tree')
library(tree)
library(ISLR)
install.packages('ISLR')
library(ISLR)
attach(Carseats)
High=ifelse(Sales <= 8, "No", "Yes")
dim(Carseats)
length(High)
Carseats=data.frame(Carseats,High)
tree.carseats=tree(High~.-Sales,Carseats)
tree.carseats=tree(High~.(-Sales),Carseats)
tree.carseats=tree(High~-Sales,Carseats)
tree.carseats=tree(High~.-Sales,Carseats)
summary(tree.carseats)
plot(tree.carseats)
library(MASS)
set.seed(1)
train<-sample(1:nrow(Boston),nrow(Boston)/2)
tree.boston<-tree(medv~.,Boston,subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston,pretty=0)
cv.boston<-cv.tree(tree.boston)
plot(cv.boston$size,cv.boston$dev,type='b')
prune.boston<-prune.tree(tree.boston,best=5)
plot(prune.boston)
text(prune.boston,pretty=0)
yhat<-predict(tree.boston,newdata=Boston[-train,])
boston.test<-Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
q("yes")
library(installr)
install.packages('installr')
library(installr)
updateR()
install.packages('shiny')
library(shiny)
install.packages('shiny')
library(shiny)
shiny::runApp('coursera/data-sc/coursera/09-Developing Data Products/week-01/myApp')
q("yes")
q("no")
q("no")
q("no")
library(slidify)
slidify('index.Rmd')
setwd("~/coursera/09-Developing_Data_Products/Shiny/mydeck")
slidify('index.Rmd')
?LifeCycleSavings
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
getwd()
setwd("~/coursera/09-Developing_Data_Products/Shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
slidify('index.Rmd')
setwd("~/coursera/09-Developing_Data_Products/Shiny/mydeck")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
q("no")
